export type ContractKey = 'timeboxInferenceEscrowV2' | 'milestoneEscrow';

export interface ContractArtifact {
  key: ContractKey;
  name: string;
  contractCode: string;
  bytecode: string;
  abi?: unknown;
}

export const contractsArray: ContractArtifact[] = [
  {
    key: 'timeboxInferenceEscrowV2',
    name: "TimeboxInferenceEscrowV2",
    contractCode: `// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import "./PaktDeFiVault1Pct.sol";

/**
 * @title TimeboxInferenceEscrowV2
 * @notice Time-locked inference-service escrow integrated with 1%-bonus DeFi vault.
 * Parties:
 *  - client: funds the service
 *  - provider: runs inference endpoint
 *  - agent: monitors health & can pause/resume
 *
 * Flow:
 *  1. Client deploys contract with provider & agent addresses and funds it.
 *  2. Client starts service.
 *  3. Provider periodically calls claim() to receive pro-rata payment.
 *  4. Agent can pause/resume service if endpoint down/up.
 *  5. Funds live inside the vault (earning +1% bonus each time withdrawn).
 */

contract TimeboxInferenceEscrowV2 {
    // Parties
    address public client;
    address payable public provider;
    address public agent;
    address public arbitrationContract;

    // Service parameters
    uint256 public startTimestamp;
    uint256 public durationSeconds;
    uint256 public fundedAmount;
    uint256 public lastClaimedTimestamp;

    bool public paused;
    uint256 public pausedAt;
    uint256 public accumulatedPausedSeconds;

    // Vault integration (1% bonus on each withdraw)
    PaktDeFiVault1Pct public vault;

    // Reentrancy guard
    uint256 private _locked = 1;
    modifier nonReentrant() {
        require(_locked == 1, "reentrant");
        _locked = 2;
        _;
        _locked = 1;
    }

    modifier onlyClient() { require(msg.sender == client, "only client"); _; }
    modifier onlyAgent() { require(msg.sender == agent, "only agent"); _; }
    modifier onlyProvider() { require(msg.sender == provider, "only provider"); _; }

    event Funded(address indexed by, uint256 amount);
    event Started(uint256 start, uint256 duration);
    event Paused(address indexed by, uint256 at);
    event Resumed(address indexed by, uint256 at);
    event Claimed(uint256 amount, uint256 at);
    event Renewed(uint256 addAmount, uint256 newDuration);
    event SentToArbitration(address arbitration, uint256 amount);

    constructor(
        address _client,
        address payable _provider,
        address _agent,
        address _arbitrationContract,
        address payable _vault,
        uint256 _durationSeconds
    ) payable {
        require(_client != address(0) && _provider != address(0) && _agent != address(0), "invalid parties");
        client = _client;
        provider = _provider;
        agent = _agent;
        arbitrationContract = _arbitrationContract;
        durationSeconds = _durationSeconds;
        vault = PaktDeFiVault1Pct(_vault);
        fundedAmount = msg.value;

        if (msg.value > 0) {
            // deposit initial funds into vault immediately
            vault.deposit{value: msg.value}();
            emit Funded(msg.sender, msg.value);
        }
    }

    receive() external payable {
        fund();
    }

    /// @notice Client adds more funds; automatically deposited into vault.
    function fund() public payable onlyClient {
        require(msg.value > 0, "no eth");
        fundedAmount += msg.value;
        vault.deposit{value: msg.value}();
        emit Funded(msg.sender, msg.value);
    }

    /// @notice Client starts the service timeline.
    function startService() external onlyClient {
        require(startTimestamp == 0, "already started");
        startTimestamp = block.timestamp;
        lastClaimedTimestamp = startTimestamp;
        emit Started(startTimestamp, durationSeconds);
    }

    /// @notice Agent pauses service (endpoint down).
    function pauseService() external onlyAgent {
        require(!paused, "already paused");
        paused = true;
        pausedAt = block.timestamp;
        emit Paused(msg.sender, pausedAt);
    }

    /// @notice Agent resumes service (endpoint back).
    function resumeService() external onlyAgent {
        require(paused, "not paused");
        accumulatedPausedSeconds += (block.timestamp - pausedAt);
        paused = false;
        pausedAt = 0;
        emit Resumed(msg.sender, block.timestamp);
    }

    /// @notice Provider claims pro-rata payment; pulls from vault (includes +1% bonus automatically).
    function claim() external onlyProvider nonReentrant {
        require(startTimestamp != 0, "not started");
        uint256 nowTs = block.timestamp;
        uint256 effectiveNow = paused ? pausedAt : nowTs;

        uint256 endTime = startTimestamp + durationSeconds + accumulatedPausedSeconds;
        if (effectiveNow > endTime) effectiveNow = endTime;
        require(effectiveNow > lastClaimedTimestamp, "nothing to claim");

        uint256 elapsed = effectiveNow - lastClaimedTimestamp;
        uint256 claimAmount = (fundedAmount * elapsed) / durationSeconds;
        uint256 currentVaultBalance = vault.balanceOf(address(this));
        if (claimAmount > currentVaultBalance) claimAmount = currentVaultBalance;

        lastClaimedTimestamp = effectiveNow;

        // Withdraw from vault directly to this escrow (vault adds 1% bonus)
        vault.withdraw(claimAmount);

        // Transfer full amount (with 1% bonus included) to provider
        uint256 payout = address(this).balance;
        (bool ok, ) = provider.call{value: payout}("");
        require(ok, "transfer failed");

        emit Claimed(payout, effectiveNow);
    }

    /// @notice Client renews (extend time + add funds)
    function renew(uint256 extraSeconds) external payable onlyClient {
        require(msg.value > 0, "no funds");
        fundedAmount += msg.value;
        durationSeconds += extraSeconds;
        vault.deposit{value: msg.value}();
        emit Renewed(msg.value, durationSeconds);
    }

    /// @notice Any party may open arbitration, sending all funds from vault.
    function openArbitration() external {
        require(msg.sender == client || msg.sender == provider || msg.sender == agent, "not party");
        uint256 bal = vault.balanceOf(address(this));
        if (bal > 0) {
            vault.withdraw(bal);
        }
        uint256 escrowBal = address(this).balance;
        if (escrowBal > 0 && arbitrationContract != address(0)) {
            (bool ok, ) = payable(arbitrationContract).call{value: escrowBal}("");
            require(ok, "send arbitration failed");
            emit SentToArbitration(arbitrationContract, escrowBal);
        }
    }

    /// @notice set or update arbitration contract (client or agent)
    function setArbitrationContract(address _arb) external {
        require(msg.sender == client || msg.sender == agent, "not permitted");
        arbitrationContract = _arb;
    }

    /// @notice emergency: view vault balance of this escrow
    function vaultBalance() external view returns (uint256) {
        return vault.balanceOf(address(this));
    }

    /// @notice contractâ€™s ETH balance (after vault withdraw, before payout)
    function escrowBalance() external view returns (uint256) {
        return address(this).balance;
    }
}`,
    bytecode: `60806040526001600c556040516200122d3803806200122d8339810160408190526200002b91620001cb565b6001600160a01b038616158015906200004c57506001600160a01b03851615155b80156200006157506001600160a01b03841615155b620000a45760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964207061727469657360881b604482015260640160405180910390fd5b5f80546001600160a01b03199081166001600160a01b03898116919091179092556001805482168884161790556002805482168784161790556003805482168684161790556005839055600b805490911691841691909117905534600681905515620001a757600b5f9054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004015f604051808303818588803b15801562000158575f80fd5b505af11580156200016b573d5f803e3d5ffd5b50506040513481523393507f5af8184bef8e4b45eb9f6ed7734d04da38ced226495548f46e0c8ff8d7d9a5249250602001905060405180910390a25b5050505050506200024f565b6001600160a01b0381168114620001c8575f80fd5b50565b5f805f805f8060c08789031215620001e1575f80fd5b8651620001ee81620001b3565b60208801519096506200020181620001b3565b60408801519095506200021481620001b3565b60608801519094506200022781620001b3565b60808801519093506200023a81620001b3565b8092505060a087015190509295509295509295565b610fd0806200025d5f395ff3fe608060405260043610610134575f3560e01c8063789b5771116100a8578063d3a371651161006d578063d3a37165146102e9578063db6003d1146102fe578063e11e1b0c14610312578063e6fd48bc14610324578063f5ff5c7614610339578063fbfa77cf14610358575f80fd5b8063789b577114610284578063820a5f50146102985780639acba2af146102ad578063b60d4288146102c2578063b615a911146102ca575f80fd5b8063109e94cf116100f9578063109e94cf146101e25780632e55d0f2146102005780633a522a7f146102155780634e71d92d146102345780635baa7509146102485780635c975abb1461025b575f80fd5b80630552f9ff14610147578063085d48831461015b5780630bd5ece8146101975780630bf6cc08146101ba5780630f91fae3146101ce575f80fd5b3661014357610141610377565b005b5f80fd5b348015610152575f80fd5b5061014161048c565b348015610166575f80fd5b5060015461017a906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101a2575f80fd5b506101ac600a5481565b60405190815260200161018e565b3480156101c5575f80fd5b506101ac61055d565b3480156101d9575f80fd5b506101416105cc565b3480156101ed575f80fd5b505f5461017a906001600160a01b031681565b34801561020b575f80fd5b506101ac60095481565b348015610220575f80fd5b5061014161022f366004610ea4565b610812565b34801561023f575f80fd5b50610141610892565b610141610256366004610ed1565b610bce565b348015610266575f80fd5b506008546102749060ff1681565b604051901515815260200161018e565b34801561028f575f80fd5b50610141610d02565b3480156102a3575f80fd5b506101ac60065481565b3480156102b8575f80fd5b506101ac60055481565b610141610377565b3480156102d5575f80fd5b5060035461017a906001600160a01b031681565b3480156102f4575f80fd5b506101ac60075481565b348015610309575f80fd5b50610141610dbc565b34801561031d575f80fd5b50476101ac565b34801561032f575f80fd5b506101ac60045481565b348015610344575f80fd5b5060025461017a906001600160a01b031681565b348015610363575f80fd5b50600b5461017a906001600160a01b031681565b5f546001600160a01b031633146103a95760405162461bcd60e51b81526004016103a090610ee8565b60405180910390fd5b5f34116103e15760405162461bcd60e51b81526020600482015260066024820152650dcde40cae8d60d31b60448201526064016103a0565b3460065f8282546103f29190610f21565b9091555050600b5460408051630d0e30db60e41b815290516001600160a01b039092169163d0e30db09134916004808301925f92919082900301818588803b15801561043c575f80fd5b505af115801561044e573d5f803e3d5ffd5b50506040513481523393507f5af8184bef8e4b45eb9f6ed7734d04da38ced226495548f46e0c8ff8d7d9a524925060200190505b60405180910390a2565b6002546001600160a01b031633146104d35760405162461bcd60e51b815260206004820152600a6024820152691bdb9b1e481859d95b9d60b21b60448201526064016103a0565b60085460ff16156105175760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481c185d5cd95960921b60448201526064016103a0565b6008805460ff1916600117905542600981905560405133917fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9161048291815260200190565b600b546040516370a0823160e01b81523060048201525f916001600160a01b0316906370a0823190602401602060405180830381865afa1580156105a3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105c79190610f3a565b905090565b5f546001600160a01b03163314806105ee57506001546001600160a01b031633145b8061060357506002546001600160a01b031633145b61063b5760405162461bcd60e51b81526020600482015260096024820152686e6f7420706172747960b81b60448201526064016103a0565b600b546040516370a0823160e01b81523060048201525f916001600160a01b0316906370a0823190602401602060405180830381865afa158015610681573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106a59190610f3a565b9050801561070757600b54604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d906024015f604051808303815f87803b1580156106f0575f80fd5b505af1158015610702573d5f803e3d5ffd5b505050505b47801580159061072157506003546001600160a01b031615155b1561080e576003546040515f916001600160a01b03169083908381818185875af1925050503d805f8114610770576040519150601f19603f3d011682016040523d82523d5f602084013e610775565b606091505b50509050806107c65760405162461bcd60e51b815260206004820152601760248201527f73656e64206172626974726174696f6e206661696c656400000000000000000060448201526064016103a0565b600354604080516001600160a01b039092168252602082018490527f18e06c116fc9c570f1671f858d69b998474dcb10cbe8829cb0c705aa99f7c8e7910160405180910390a1505b5050565b5f546001600160a01b031633148061083457506002546001600160a01b031633145b6108705760405162461bcd60e51b815260206004820152600d60248201526c1b9bdd081c195c9b5a5d1d1959609a1b60448201526064016103a0565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031633146108dc5760405162461bcd60e51b815260206004820152600d60248201526c37b7363c90383937bb34b232b960991b60448201526064016103a0565b600c5460011461091a5760405162461bcd60e51b81526020600482015260096024820152681c99595b9d1c985b9d60ba1b60448201526064016103a0565b6002600c556004545f0361095e5760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd081cdd185c9d195960aa1b60448201526064016103a0565b60085442905f9060ff166109725781610976565b6009545b90505f600a5460055460045461098c9190610f21565b6109969190610f21565b9050808211156109a4578091505b60075482116109e85760405162461bcd60e51b815260206004820152601060248201526f6e6f7468696e6720746f20636c61696d60801b60448201526064016103a0565b5f600754836109f79190610f51565b90505f60055482600654610a0b9190610f64565b610a159190610f7b565b600b546040516370a0823160e01b81523060048201529192505f916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610a60573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a849190610f3a565b905080821115610a92578091505b6007859055600b54604051632e1a7d4d60e01b8152600481018490526001600160a01b0390911690632e1a7d4d906024015f604051808303815f87803b158015610ada575f80fd5b505af1158015610aec573d5f803e3d5ffd5b50506001546040514793505f92506001600160a01b039091169083908381818185875af1925050503d805f8114610b3e576040519150601f19603f3d011682016040523d82523d5f602084013e610b43565b606091505b5050905080610b865760405162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c8819985a5b1959608a1b60448201526064016103a0565b60408051838152602081018990527fc83b5086ce94ec8d5a88a9f5fea4b18a522bb238ed0d2d8abd959549a80c16b8910160405180910390a150506001600c55505050505050565b5f546001600160a01b03163314610bf75760405162461bcd60e51b81526004016103a090610ee8565b5f3411610c315760405162461bcd60e51b81526020600482015260086024820152676e6f2066756e647360c01b60448201526064016103a0565b3460065f828254610c429190610f21565b925050819055508060055f828254610c5a9190610f21565b9091555050600b5460408051630d0e30db60e41b815290516001600160a01b039092169163d0e30db09134916004808301925f92919082900301818588803b158015610ca4575f80fd5b505af1158015610cb6573d5f803e3d5ffd5b50505050507fa3b231fbb516462c26b9b2de2c4ab9072ef38e6f324e8a0d3a5f28f420758d4c34600554604051610cf7929190918252602082015260400190565b60405180910390a150565b5f546001600160a01b03163314610d2b5760405162461bcd60e51b81526004016103a090610ee8565b60045415610d6d5760405162461bcd60e51b815260206004820152600f60248201526e185b1c9958591e481cdd185c9d1959608a1b60448201526064016103a0565b42600481905560078190556005546040517f87ac41d581680567c1ef44614ddfa5522f853ea15b877693a35b1e4157cc309d92610db292908252602082015260400190565b60405180910390a1565b6002546001600160a01b03163314610e035760405162461bcd60e51b815260206004820152600a6024820152691bdb9b1e481859d95b9d60b21b60448201526064016103a0565b60085460ff16610e425760405162461bcd60e51b815260206004820152600a6024820152691b9bdd081c185d5cd95960b21b60448201526064016103a0565b600954610e4f9042610f51565b600a5f828254610e5f9190610f21565b90915550506008805460ff191690555f60095560405142815233907fb114fbe21a5cc286fdf44385ed553871bb2933fbe2f3fca94f3dd49ce7e0cb1890602001610482565b5f60208284031215610eb4575f80fd5b81356001600160a01b0381168114610eca575f80fd5b9392505050565b5f60208284031215610ee1575f80fd5b5035919050565b6020808252600b908201526a1bdb9b1e4818db1a595b9d60aa1b604082015260600190565b634e487b7160e01b5f52601160045260245ffd5b80820180821115610f3457610f34610f0d565b92915050565b5f60208284031215610f4a575f80fd5b5051919050565b81810381811115610f3457610f34610f0d565b8082028115828204841417610f3457610f34610f0d565b5f82610f9557634e487b7160e01b5f52601260045260245ffd5b50049056fea2646970667358221220798274ff85b03ae7c5def067feb7361a3c4e327a1859db9ae49c028d1276abd664736f6c63430008180033`,
  },
  {
    key: 'milestoneEscrow',
    name: "MilestoneEscrow",
    contractCode: `// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import "./PaktDeFiVault1Pct.sol";

/**
 * @title MilestoneEscrowV3
 * @notice Individualized escrow with AI-agent verification, milestone payments,
 *         arbitration routing, and integrated 1 %-bonus DeFi vault.
 */
contract MilestoneEscrow {
    /*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      â–‘  STRUCTS  &  STATE
    â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
    struct Milestone {
        uint256 amount;          // agreed payment for this milestone
        string description;      // optional short text
        bool verifiedByAgent;    // agent validated work
        bool clientApproved;     // client accepted milestone
        bool paid;               // already withdrawn
        string verificationHash; // IPFS / 0G proof
    }

    address public client;
    address payable public freelancer;
    address public agent;
    address public arbitrationContract;

    PaktDeFiVault1Pct public vault; // +1 % yield vault
    uint256 public storageFee;        // optional extra fee bucket
    Milestone[] public milestones;

    enum State { CREATED, FUNDED, DISPUTED, CLOSED }
    State public state;

    /*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      â–‘  EVENTS
    â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
    event Funded(address indexed by, uint256 amount);
    event MilestoneAdded(uint256 indexed id, uint256 amount, string desc);
    event MilestoneVerified(uint256 indexed id, address agent, string hash, bool passed);
    event MilestoneApproved(uint256 indexed id, address client);
    event MilestonePaid(uint256 indexed id, address freelancer, uint256 amount);
    event SentToArbitration(address arbitration, uint256 amount);
    event ContractStateChanged(State newState);

    /*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      â–‘  MODIFIERS
    â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
    modifier onlyClient() { require(msg.sender == client, "only client"); _; }
    modifier onlyAgent() { require(msg.sender == agent, "only agent"); _; }
    modifier onlyFreelancer() { require(msg.sender == freelancer, "only freelancer"); _; }
    modifier nonReentrant() { require(_locked == 1, "reentrant"); _locked = 2; _; _locked = 1; }
    uint256 private _locked = 1;

    /*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      â–‘  CONSTRUCTOR
    â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
    constructor(
        address _client,
        address payable _freelancer,
        address _agent,
        address _arbitration,
        address payable _vault,
        uint256 _storageFee
    ) payable {
        require(_client != address(0) && _freelancer != address(0) && _agent != address(0), "invalid parties");
        client = _client;
        freelancer = _freelancer;
        agent = _agent;
        arbitrationContract = _arbitration;
        vault = PaktDeFiVault1Pct(_vault);
        storageFee = _storageFee;
        state = State.CREATED;

        if (msg.value > 0) {
            vault.deposit{value: msg.value}();
            emit Funded(msg.sender, msg.value);
            state = State.FUNDED;
        }
    }

    receive() external payable { fund(); }

    /*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      â–‘  CORE  FLOW
    â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/

    /// client adds more funds; all deposits go straight into the vault
    function fund() public payable onlyClient {
        require(msg.value > 0, "no eth");
        vault.deposit{value: msg.value}();
        emit Funded(msg.sender, msg.value);
        if (state == State.CREATED) state = State.FUNDED;
    }

    /// add a milestone (before work starts)
    function addMilestone(uint256 amount, string calldata desc) external onlyClient {
        require(state == State.CREATED || state == State.FUNDED, "cannot add now");
        milestones.push(Milestone({
            amount: amount,
            description: desc,
            verifiedByAgent: false,
            clientApproved: false,
            paid: false,
            verificationHash: ""
        }));
        emit MilestoneAdded(milestones.length - 1, amount, desc);
    }

    /// agent verifies deliverable
    function verifyMilestone(uint256 id, string calldata proof, bool passed) external onlyAgent {
        require(id < milestones.length, "bad id");
        Milestone storage m = milestones[id];
        require(!m.paid, "already paid");
        m.verifiedByAgent = passed;
        m.verificationHash = proof;
        emit MilestoneVerified(id, msg.sender, proof, passed);
    }

    /// client approves payment after verification
    function approveMilestone(uint256 id) external onlyClient {
        Milestone storage m = milestones[id];
        require(m.verifiedByAgent, "not verified");
        require(!m.clientApproved, "already approved");
        m.clientApproved = true;
        emit MilestoneApproved(id, msg.sender);
    }

    /// freelancer claims approved milestone; withdraws from vault (+1%)
    function claimMilestone(uint256 id) external onlyFreelancer nonReentrant {
        require(state != State.DISPUTED, "disputed");
        Milestone storage m = milestones[id];
        require(m.clientApproved && m.verifiedByAgent, "not approved");
        require(!m.paid, "paid");

        uint256 currentVaultBalance = vault.balanceOf(address(this));
        require(currentVaultBalance >= m.amount, "vault low");

        m.paid = true;

        // pull funds (adds +1 %) from vault to escrow
        vault.withdraw(m.amount);

        uint256 payout = address(this).balance;
        (bool ok, ) = freelancer.call{value: payout}("");
        require(ok, "transfer failed");

        emit MilestonePaid(id, freelancer, payout);

        if (_allPaid()) {
            state = State.CLOSED;
            emit ContractStateChanged(state);
        }
    }

    /*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      â–‘  UTILITIES
    â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/

    function _allPaid() internal view returns (bool) {
        for (uint i; i < milestones.length; i++) if (!milestones[i].paid) return false;
        return true;
    }

    /*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      â–‘  ARBITRATION
    â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/

    function openDispute() external {
        require(msg.sender == client || msg.sender == freelancer || msg.sender == agent, "not party");
        state = State.DISPUTED;
        emit ContractStateChanged(state);
    }

    function sendToArbitration() external nonReentrant {
        require(state == State.DISPUTED, "not disputed");
        uint256 bal = vault.balanceOf(address(this));
        if (bal > 0) vault.withdraw(bal);
        uint256 escrowBal = address(this).balance;
        if (escrowBal > 0 && arbitrationContract != address(0)) {
            (bool ok, ) = payable(arbitrationContract).call{value: escrowBal}("");
            require(ok, "send failed");
            emit SentToArbitration(arbitrationContract, escrowBal);
        }
    }

    /*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      â–‘  VIEWS
    â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/

    function milestoneCount() external view returns (uint256) { return milestones.length; }

    function vaultBalanceOfEscrow() external view returns (uint256) {
        return vault.balanceOf(address(this));
    }

    function contractBalance() external view returns (uint256) {
        return address(this).balance;
    }
}`,
    bytecode: `608060405260016008556040516200197f3803806200197f8339810160408190526200002b91620001d3565b6001600160a01b038616158015906200004c57506001600160a01b03851615155b80156200006157506001600160a01b03841615155b620000a45760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964207061727469657360881b604482015260640160405180910390fd5b5f80546001600160a01b03199081166001600160a01b03898116919091179092556001805482168884161790556002805482168784161790556003805482168684161790556004805490911691841691909117905560058190556007805460ff191690553415620001af576004805460408051630d0e30db60e41b815290516001600160a01b039092169263d0e30db0923492808301925f929182900301818588803b15801562000153575f80fd5b505af115801562000166573d5f803e3d5ffd5b50506040513481523393507f5af8184bef8e4b45eb9f6ed7734d04da38ced226495548f46e0c8ff8d7d9a5249250602001905060405180910390a26007805460ff191660011790555b50505050505062000257565b6001600160a01b0381168114620001d0575f80fd5b50565b5f805f805f8060c08789031215620001e9575f80fd5b8651620001f681620001bb565b60208801519096506200020981620001bb565b60408801519095506200021c81620001bb565b60608801519094506200022f81620001bb565b60808801519093506200024281620001bb565b8092505060a087015190509295509295509295565b61171a80620002655f395ff3fe608060405260043610610108575f3560e01c80638b7afe2e11610092578063c19d93fb11610062578063c19d93fb1461027a578063c438b40f146102a0578063e89e4ed6146102bf578063f5ff5c76146102f0578063fbfa77cf1461030f575f80fd5b80638b7afe2e14610222578063a37dda2c14610234578063b60d428814610253578063b615a9111461025b575f80fd5b80632d8b1fd0116100d85780632d8b1fd0146101b25780634fd6137c146101c65780635d9e722c146101da578063644c92a4146101ee578063773f0b181461020d575f80fd5b80630681ca551461011b5780630d1d1afa1461013e578063109e94cf1461015d57806321aa8c5014610193575f80fd5b366101175761011561032e565b005b5f80fd5b348015610126575f80fd5b506006545b6040519081526020015b60405180910390f35b348015610149575f80fd5b50610115610158366004611252565b610455565b348015610168575f80fd5b505f5461017b906001600160a01b031681565b6040516001600160a01b039091168152602001610135565b34801561019e575f80fd5b506101156101ad36600461129a565b61064e565b3480156101bd575f80fd5b5061012b6107a4565b3480156101d1575f80fd5b50610115610818565b3480156101e5575f80fd5b506101156108cf565b3480156101f9575f80fd5b506101156102083660046112f9565b610b34565b348015610218575f80fd5b5061012b60055481565b34801561022d575f80fd5b504761012b565b34801561023f575f80fd5b5060015461017b906001600160a01b031681565b61011561032e565b348015610266575f80fd5b5060035461017b906001600160a01b031681565b348015610285575f80fd5b506007546102939060ff1681565b6040516101359190611324565b3480156102ab575f80fd5b506101156102ba3660046112f9565b610f2e565b3480156102ca575f80fd5b506102de6102d93660046112f9565b611057565b6040516101359695949392919061138d565b3480156102fb575f80fd5b5060025461017b906001600160a01b031681565b34801561031a575f80fd5b5060045461017b906001600160a01b031681565b5f546001600160a01b031633146103605760405162461bcd60e51b8152600401610357906113dc565b60405180910390fd5b5f34116103985760405162461bcd60e51b81526020600482015260066024820152650dcde40cae8d60d31b6044820152606401610357565b6004805460408051630d0e30db60e41b815290516001600160a01b039092169263d0e30db0923492808301925f929182900301818588803b1580156103db575f80fd5b505af11580156103ed573d5f803e3d5ffd5b50506040513481523393507f5af8184bef8e4b45eb9f6ed7734d04da38ced226495548f46e0c8ff8d7d9a5249250602001905060405180910390a25f60075460ff16600381111561044057610440611310565b03610453576007805460ff191660011790555b565b5f546001600160a01b0316331461047e5760405162461bcd60e51b8152600401610357906113dc565b5f60075460ff16600381111561049657610496611310565b14806104b85750600160075460ff1660038111156104b6576104b6611310565b145b6104f55760405162461bcd60e51b815260206004820152600e60248201526d63616e6e6f7420616464206e6f7760901b6044820152606401610357565b60066040518060c0016040528085815260200184848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201829052509385525050506020808301829052604080840183905260608401839052805180830190915282815260809093019290925283546001818101865594825290829020835160049092020190815590820151919290919082019061059b9082611499565b506040820151600282018054606085015160808601511515620100000262ff0000199115156101000261ff00199515159590951661ffff1990931692909217939093179290921691909117905560a082015160038201906105fc9082611499565b505060065461060e9150600190611559565b7fe67e4500ba1c5a33e0bb3c97b84e34eb7f637c3da038f433e1d77ba82e221dac848484604051610641939291906115a6565b60405180910390a2505050565b6002546001600160a01b031633146106955760405162461bcd60e51b815260206004820152600a6024820152691bdb9b1e481859d95b9d60b21b6044820152606401610357565b60065484106106cf5760405162461bcd60e51b8152602060048201526006602482015265189859081a5960d21b6044820152606401610357565b5f600685815481106106e3576106e36115c8565b905f5260205f20906004020190508060020160029054906101000a900460ff161561073f5760405162461bcd60e51b815260206004820152600c60248201526b185b1c9958591e481c185a5960a21b6044820152606401610357565b60028101805460ff19168315151790556003810161075e8486836115dc565b50847fa1d92bf9efb6617b4970e4d129f189955191663e8280fed8a70478aef6649585338686866040516107959493929190611696565b60405180910390a25050505050565b600480546040516370a0823160e01b815230928101929092525f916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156107ef573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061081391906116cd565b905090565b5f546001600160a01b031633148061083a57506001546001600160a01b031633145b8061084f57506002546001600160a01b031633145b6108875760405162461bcd60e51b81526020600482015260096024820152686e6f7420706172747960b81b6044820152606401610357565b6007805460ff191660029081179091556040517fab540c1b3defd38d975e65aa0e06eeee132a55dd082be87b73f505ab57bed48c916108c591611324565b60405180910390a1565b60085460011461090d5760405162461bcd60e51b81526020600482015260096024820152681c99595b9d1c985b9d60ba1b6044820152606401610357565b6002600881905560075460ff16600381111561092b5761092b611310565b146109675760405162461bcd60e51b815260206004820152600c60248201526b1b9bdd08191a5cdc1d5d195960a21b6044820152606401610357565b600480546040516370a0823160e01b815230928101929092525f916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156109b2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109d691906116cd565b90508015610a365760048054604051632e1a7d4d60e01b81529182018390526001600160a01b031690632e1a7d4d906024015f604051808303815f87803b158015610a1f575f80fd5b505af1158015610a31573d5f803e3d5ffd5b505050505b478015801590610a5057506003546001600160a01b031615155b15610b2b576003546040515f916001600160a01b03169083908381818185875af1925050503d805f8114610a9f576040519150601f19603f3d011682016040523d82523d5f602084013e610aa4565b606091505b5050905080610ae35760405162461bcd60e51b815260206004820152600b60248201526a1cd95b990819985a5b195960aa1b6044820152606401610357565b600354604080516001600160a01b039092168252602082018490527f18e06c116fc9c570f1671f858d69b998474dcb10cbe8829cb0c705aa99f7c8e7910160405180910390a1505b50506001600855565b6001546001600160a01b03163314610b805760405162461bcd60e51b815260206004820152600f60248201526e37b7363c90333932b2b630b731b2b960891b6044820152606401610357565b600854600114610bbe5760405162461bcd60e51b81526020600482015260096024820152681c99595b9d1c985b9d60ba1b6044820152606401610357565b6002600881905560075460ff166003811115610bdc57610bdc611310565b03610c145760405162461bcd60e51b8152602060048201526008602482015267191a5cdc1d5d195960c21b6044820152606401610357565b5f60068281548110610c2857610c286115c8565b905f5260205f20906004020190508060020160019054906101000a900460ff168015610c585750600281015460ff165b610c935760405162461bcd60e51b815260206004820152600c60248201526b1b9bdd08185c1c1c9bdd995960a21b6044820152606401610357565b600281015462010000900460ff1615610cd75760405162461bcd60e51b8152600401610357906020808252600490820152631c185a5960e21b604082015260600190565b600480546040516370a0823160e01b815230928101929092525f916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610d22573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d4691906116cd565b8254909150811015610d865760405162461bcd60e51b81526020600482015260096024820152687661756c74206c6f7760b81b6044820152606401610357565b60028201805462ff0000191662010000179055600480548354604051632e1a7d4d60e01b8152928301526001600160a01b031690632e1a7d4d906024015f604051808303815f87803b158015610dda575f80fd5b505af1158015610dec573d5f803e3d5ffd5b50506001546040514793505f92506001600160a01b039091169083908381818185875af1925050503d805f8114610e3e576040519150601f19603f3d011682016040523d82523d5f602084013e610e43565b606091505b5050905080610e865760405162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c8819985a5b1959608a1b6044820152606401610357565b600154604080516001600160a01b0390921682526020820184905286917feb9c1c0ba80d314c5a14871b72dc4f410bdea96f477f1d189bab636b73c6bff4910160405180910390a2610ed66111b5565b15610f22576007805460ff191660039081179091556040517fab540c1b3defd38d975e65aa0e06eeee132a55dd082be87b73f505ab57bed48c91610f1991611324565b60405180910390a15b50506001600855505050565b5f546001600160a01b03163314610f575760405162461bcd60e51b8152600401610357906113dc565b5f60068281548110610f6b57610f6b6115c8565b5f9182526020909120600490910201600281015490915060ff16610fc05760405162461bcd60e51b815260206004820152600c60248201526b1b9bdd081d995c9a599a595960a21b6044820152606401610357565b6002810154610100900460ff161561100d5760405162461bcd60e51b815260206004820152601060248201526f185b1c9958591e48185c1c1c9bdd995960821b6044820152606401610357565b60028101805461ff00191661010017905560405133815282907f553edf5d6a50b30b5e1faa5428a9962e9b3af648e5ab3791bf7e79ccb10f7f559060200160405180910390a25050565b60068181548110611066575f80fd5b5f918252602090912060049091020180546001820180549193509061108a90611415565b80601f01602080910402602001604051908101604052809291908181526020018280546110b690611415565b80156111015780601f106110d857610100808354040283529160200191611101565b820191905f5260205f20905b8154815290600101906020018083116110e457829003601f168201915b5050506002840154600385018054949560ff80841696610100850482169650620100009094041693509161113490611415565b80601f016020809104026020016040519081016040528092919081815260200182805461116090611415565b80156111ab5780601f10611182576101008083540402835291602001916111ab565b820191905f5260205f20905b81548152906001019060200180831161118e57829003601f168201915b5050505050905086565b5f805b60065481101561120557600681815481106111d5576111d56115c8565b905f5260205f20906004020160020160029054906101000a900460ff166111fd575f91505090565b6001016111b8565b506001905090565b5f8083601f84011261121d575f80fd5b50813567ffffffffffffffff811115611234575f80fd5b60208301915083602082850101111561124b575f80fd5b9250929050565b5f805f60408486031215611264575f80fd5b83359250602084013567ffffffffffffffff811115611281575f80fd5b61128d8682870161120d565b9497909650939450505050565b5f805f80606085870312156112ad575f80fd5b84359350602085013567ffffffffffffffff8111156112ca575f80fd5b6112d68782880161120d565b909450925050604085013580151581146112ee575f80fd5b939692955090935050565b5f60208284031215611309575f80fd5b5035919050565b634e487b7160e01b5f52602160045260245ffd5b602081016004831061134457634e487b7160e01b5f52602160045260245ffd5b91905290565b5f81518084525f5b8181101561136e57602081850181015186830182015201611352565b505f602082860101526020601f19601f83011685010191505092915050565b86815260c060208201525f6113a560c083018861134a565b86151560408401528515156060840152841515608084015282810360a08401526113cf818561134a565b9998505050505050505050565b6020808252600b908201526a1bdb9b1e4818db1a595b9d60aa1b604082015260600190565b634e487b7160e01b5f52604160045260245ffd5b600181811c9082168061142957607f821691505b60208210810361144757634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561149457805f5260205f20601f840160051c810160208510156114725750805b601f840160051c820191505b81811015611491575f815560010161147e565b50505b505050565b815167ffffffffffffffff8111156114b3576114b3611401565b6114c7816114c18454611415565b8461144d565b602080601f8311600181146114fa575f84156114e35750858301515b5f19600386901b1c1916600185901b178555611551565b5f85815260208120601f198616915b8281101561152857888601518255948401946001909101908401611509565b508582101561154557878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b8181038181111561157857634e487b7160e01b5f52601160045260245ffd5b92915050565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b838152604060208201525f6115bf60408301848661157e565b95945050505050565b634e487b7160e01b5f52603260045260245ffd5b67ffffffffffffffff8311156115f4576115f4611401565b611608836116028354611415565b8361144d565b5f601f841160018114611639575f85156116225750838201355b5f19600387901b1c1916600186901b178355611491565b5f83815260208120601f198716915b828110156116685786850135825560209485019460019092019101611648565b5086821015611684575f1960f88860031b161c19848701351681555b505060018560011b0183555050505050565b6001600160a01b03851681526060602082018190525f906116ba908301858761157e565b9050821515604083015295945050505050565b5f602082840312156116dd575f80fd5b505191905056fea2646970667358221220c2e75322a784d2f8c9394a24f33cb1daf5b3af6f10a65c993eec26efd3b01f1664736f6c63430008180033`,
  },
];

export const contractsByKey = contractsArray.reduce<Record<ContractKey, ContractArtifact>>((acc, contract) => {
  acc[contract.key] = contract;
  return acc;
}, {} as Record<ContractKey, ContractArtifact>);

export function getContractByKey(key: ContractKey): ContractArtifact | undefined {
  return contractsByKey[key];
}
